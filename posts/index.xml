<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Msutar</title>
    <link>https://msutar.com/posts/</link>
    <description>Recent content in Posts on Msutar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://msutar.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Win10 自动提交 Git</title>
      <link>https://msutar.com/2020/win10%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4git/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://msutar.com/2020/win10%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4git/</guid>
      <description>自动提交Git 实现笔记同步 在windows 需要自动提交 Git 可以借助 Windows 的 任务计划程序 来实现使用。
具体操作可以按 Win 键然后搜索 任务计划程序 创建一个启动应用，每隔5分钟触发，others/run_push_git.vbs 即可自动提交。
如下是一个已经创建好的计划：
run_push_git.vbs 文件如下：
set shell=wscript.createObject(&amp;#34;wscript.shell&amp;#34;) run=shell.Run(&amp;#34;C:\Apps\Git\bin\bash.exe D:\Notebook\others\auto_git.sh&amp;#34;, 0) 为什么要用 .vbs 文件呢？ 因为如果直接使用 sh 的话，会出现一个黑框一闪而过，所以在 windows 上使用这个文件中转一下。
真实逻辑在auto_git.sh中
我的 bash 水平有限，只实现了功能，还有很多可以优化的地方，欢迎指教~
#!/bin/bash  dir=&amp;#34;/d/Notebook&amp;#34; cd $dir #************************************************** # 创建日志文件 log_dir=logs log_file=$(date +%Y%m%d)_info.log if [ ! -d $log_dir ] then mkdir $log_dir fi if [ -d $log_dir ] then # mkdir logs cd $log_dir if [ !</description>
    </item>
    
    <item>
      <title>创建一个 Hugo 主题</title>
      <link>https://msutar.com/2014/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://msutar.com/2014/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://msutar.com/2014/goisforlovers/</link>
      <pubDate>Mon, 28 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://msutar.com/2014/goisforlovers/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://msutar.com/2014/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://msutar.com/2014/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  public function () { } Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://msutar.com/2014/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://msutar.com/2014/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/▾ images/logo.png should become
▾ &amp;lt;root&amp;gt;/▾ static/▾ images/logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
  </channel>
</rss>
